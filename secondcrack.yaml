---
AWSTemplateFormatVersion: "2010-09-09"

Description: >
  Infrastructure for static website hosted with S3 and CloudFront with a custom domain.
  * S3 bucket for web site content
  * Access logs written to logs bucket
  * ACM Certificate for SSL
  * CloudFront distributions for website https access
  * Rewrite URLs using CloudFront and Lambda@Edge
  * Route 53 hosted zone with DNS entries

Metadata:

  Authors:
    Description: Wanderley Teixeira (wanderley@linux.com)

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: DNS
        Parameters:
          - DomainName
          - CreateSslCertificate
      - Label:
          default: PreExisting Resources To Use (Leave empty for stack to create and manage)
        Parameters:
          - PreExistingHostedZoneDomain
      - Label:
          default: Paths
        Parameters:
          - ErrorPagePath
          - IndexDocument
      - Label:
          default: Administrative
        Parameters:
          - LogsRetentionInDays

Parameters:

  # Domain: wanderleyteixeira.com
  DomainName:
    Type: String
    Description: The DNS name of an Amazon Route 53 hosted zone (e.g. wanderleyteixeira.com).
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: Must be a valid DNS zone name

  CreateSslCertificate:
    Description: >-
      Create an HTTPS certificate for this site. You MUST create this
      stack in the us-east-1 (N. Virginia) region when creating a certificate.
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'

  PriceClass:
    Type: String
    Description: The CloudFront distribution price class
    Default: 'PriceClass_All'
    AllowedValues:
      - 'PriceClass_100'
      - 'PriceClass_200'
      - 'PriceClass_All'

  ErrorPagePath:
    Description: The path of the error page for the website.
    Type: String
    Default: /404

  IndexDocument:
    Description: Directory index filename
    Type: String
    Default: index.html

  IncludeLambdaEdge:
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'

  LogsRetentionInDays:
    Description: Specifies the number of days you want to retain log events
    Type: Number
    Default: 14
    AllowedValues:
      - 14
      - 30
      - 60
      - 90
      - 120
      - 180
      - 365

  PreExistingHostedZoneDomain:
    Description: "(Optional) Domain name for pre-existing Route 53 hosted zone. Leave empty to have hosted zone created and managed by this stack."
    Type: String
    Default: ""

  PreExistingLogsBucket:
    Description: "(Optional) Name of pre-existing access logs bucket. Leave empty to have access logs bucket created and managed by this stack."
    Type: String
    Default: ""

Conditions:

  NeedsNewHostedZone: !Equals [!Ref PreExistingHostedZoneDomain, ""]
  NeedsNewLogsBucket: !Equals [!Ref PreExistingLogsBucket, ""]
  IncludeLambdaEdge:  !Equals ['Yes', !Ref IncludeLambdaEdge]
  ShouldCreateSslCertificate: !Equals  ['Yes', !Ref CreateSslCertificate]

Resources:

  # Bucket for CloudFront and S3 access logs: logs.wanderleyteixeira.com
  LogsBucket:
    Condition: NeedsNewLogsBucket
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "logs.${DomainName}"
      AccessControl: LogDeliveryWrite

  S3BucketForWebsiteContent:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Enabled
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404
      # logs.wanderleyteixeira.com/logs/s3/wanderleyteixeira.com/
      LoggingConfiguration:
        DestinationBucketName: !If [NeedsNewLogsBucket, !Ref LogsBucket, !Ref PreExistingLogsBucket]
        LogFilePrefix: !Sub "logs/s3/${DomainName}/"
      Tags:
        - Key: Domain
          Value: !Ref DomainName

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront OAI for ${DomainName}'
  ReadPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3BucketForWebsiteContent
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3BucketForWebsiteContent}/*'
            Principal:
              CanonicalUser: !GetAtt 
                - CloudFrontOriginAccessIdentity
                - S3CanonicalUserId

  # CDN serves S3 content over HTTPS for wanderleyteixeira.com
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Comment: CDN for S3 static website
        Aliases:
          - !Ref DomainName
          - !Sub "www.${DomainName}"
        ViewerCertificate:
          AcmCertificateArn: !Ref Cert
          SslSupportMethod: sni-only
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: !Ref ErrorPagePath
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: !Ref ErrorPagePath
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          DefaultTTL: 3600
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          MaxTTL: 86400
          MinTTL: 60
          TargetOriginId: s3origin
          ViewerProtocolPolicy: !If 
            - ShouldCreateSslCertificate
            - redirect-to-https
            - allow-all
          # Lambda@Edge to fix subdirectories -> index.html
          LambdaFunctionAssociations:
            - !If
                - IncludeLambdaEdge
                - EventType: 'origin-request'
                  LambdaFunctionARN: !Join [":", [!GetAtt [LambdaEdgeFunction, Arn], !GetAtt [LambdaEdgeVersion, Version]]]
                - !Ref 'AWS::NoValue'
        Enabled: true
        HttpVersion: http2
        DefaultRootObject: index.html
        # logs.wanderleyteixeira.com/logs/cloudfront/wanderleyteixeira.com/
        Logging:
          Bucket: !Join ["", [!If [NeedsNewLogsBucket, !Ref LogsBucket, !Ref PreExistingLogsBucket], ".s3.amazonaws.com"]]
          Prefix: !Sub "logs/cloudfront/${DomainName}/"
          IncludeCookies: false
        Origins:
          - DomainName: !GetAtt 
              - S3BucketForWebsiteContent
              - DomainName
            Id: s3origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub >-
                origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        PriceClass: !Ref PriceClass
      Tags:
        - Key: Domain
          Value: !Ref DomainName

  # Lambda@Edge Function
  LambdaEdgeFunction: 
    Type: 'AWS::Lambda::Function'
    Condition: IncludeLambdaEdge
    Properties: 
      Handler: 'index.handler'
      Role: 
        Fn::GetAtt: 
          - 'LambdaEdgePermission'
          - 'Arn'
      Code: 
        ZipFile: |
            'use strict';
            exports.handler = (event, context, callback) => {

                // Extract the request from the CloudFront event that is sent to Lambda@Edge 
                var request = event.Records[0].cf.request;
                
                // Extract the URI from the request
                var requestUrl = request.uri;
                
                // Match any '/' that occurs at the end of a URI. Replace it with a default index
                var redirectUrl = requestUrl.replace(/\/$/, '\/index.html');
                
                // Log the URI as received by CloudFront and the new URI to be used to fetch from origin
                console.log("Old URI: " + requestUrl);
                console.log("New URI: " + redirectUrl);
                
                // Replace the received URI with the URI that includes the index page
                request.uri = redirectUrl;
                
                // Return to CloudFront
                return callback(null, request);
                
                };
      Runtime: 'nodejs8.10'
      MemorySize: 128
      Timeout: 3
      Description: 'Redirects for CloudFront'
      TracingConfig:
        Mode: 'Active'
      Tags:
        - Key: Domain
          Value: !Ref DomainName
  
  # Role and policy for Lambda@Edge and logs
  # This allows CloudFront to execute this function as a Lambda@Edge function
  LambdaEdgePermission:
    Type: 'AWS::IAM::Role'
    Condition: IncludeLambdaEdge
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 'sts:AssumeRole'
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Effect: Allow
      Policies:
        - PolicyName: EdgePoliciesLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'xray:PutTraceSegments'
                  - 'xray:PutTelemetryRecords'
                  - 'lambda:GetFunction'
                  - 'lambda:EnableReplication*'
                  - 'lambda:InvokeFunction'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: '*'

  # Lambda@Edge version
  LambdaEdgeVersion: 
    Type: 'AWS::Lambda::Version'
    Condition: IncludeLambdaEdge
    Properties: 
      FunctionName: !Ref 'LambdaEdgeFunction'
      Description: !Sub "The deployed version of the Lambda@Edge function"

  # DNS: wanderleyteixeira.com, www.wanderleyteixeira.com
  DNS:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      HostedZoneConfig:
        Comment: !Join ['', ['Hosted zone for ', !Ref 'DomainName']]
      Name: !Ref 'DomainName'
      HostedZoneTags:
        - Key: Domain
          Value: !Ref DomainName
  Route53RecordSetGroup:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId: !If [NeedsNewHostedZone, !Ref DNS, !Ref "AWS::NoValue"]
      HostedZoneName: !If [NeedsNewHostedZone, !Ref "AWS::NoValue", !Sub "${PreExistingHostedZoneDomain}."]
      RecordSets:
        # wanderleyteixeira.com
        - Name: !Sub "${DomainName}."
          Type: A
          # Resolve to CloudFront distribution
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # CloudFront
            DNSName: !GetAtt CloudFrontDistribution.DomainName

  # FastMail DNS settings
  dnstxt:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: !If [NeedsNewHostedZone, !Ref DNS, !Ref "AWS::NoValue"]
      HostedZoneName: !If [NeedsNewHostedZone, !Ref "AWS::NoValue", !Sub "${PreExistingHostedZoneDomain}."]
      RecordSets:
        # Fastmail TXT
        - Name: !Sub "${DomainName}."
          Type: 'TXT'
          TTL: '3600'
          ResourceRecords:
            - "\"v=spf1 include:spf.messagingengine.com ?all\""
  dnsmx:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: !If [NeedsNewHostedZone, !Ref DNS, !Ref "AWS::NoValue"]
      HostedZoneName: !If [NeedsNewHostedZone, !Ref "AWS::NoValue", !Sub "${PreExistingHostedZoneDomain}."]
      RecordSets:
        # Fastmail MX
        - Name: !Sub "${DomainName}."
          Type: 'MX'
          TTL: '3600'
          ResourceRecords:
            - "10 in1-smtp.messagingengine.com"
            - "20 in2-smtp.messagingengine.com"
  dnssrv1:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: !If [NeedsNewHostedZone, !Ref DNS, !Ref "AWS::NoValue"]
      HostedZoneName: !If [NeedsNewHostedZone, !Ref "AWS::NoValue", !Sub "${PreExistingHostedZoneDomain}."]
      RecordSets:
        # Fastmail MX
        - Name: !Sub "_imap._tcp.${DomainName}."
          Type: 'SRV'
          TTL: '3600'
          ResourceRecords:
            - "0 0 0 ."
  dnssrv2:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: !If [NeedsNewHostedZone, !Ref DNS, !Ref "AWS::NoValue"]
      HostedZoneName: !If [NeedsNewHostedZone, !Ref "AWS::NoValue", !Sub "${PreExistingHostedZoneDomain}."]
      RecordSets:
        # Fastmail MX
        - Name: !Sub "_imaps._tcp.${DomainName}."
          Type: 'SRV'
          TTL: '3600'
          ResourceRecords:
            - "0 1 993 imap.fastmail.com"
  dnscname1:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: !If [NeedsNewHostedZone, !Ref DNS, !Ref "AWS::NoValue"]
      HostedZoneName: !If [NeedsNewHostedZone, !Ref "AWS::NoValue", !Sub "${PreExistingHostedZoneDomain}."]
      RecordSets:
        # Fastmail MX
        - Name: !Sub "fm1._domainkey._tcp.${DomainName}."
          Type: 'CNAME'
          TTL: '3600'
          ResourceRecords:
            - "fm1.wanderleyteixeira.com.dkim.fmhosted.com"
  dnscname2:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: !If [NeedsNewHostedZone, !Ref DNS, !Ref "AWS::NoValue"]
      HostedZoneName: !If [NeedsNewHostedZone, !Ref "AWS::NoValue", !Sub "${PreExistingHostedZoneDomain}."]
      RecordSets:
        # Fastmail MX
        - Name: !Sub "fm2._domainkey._tcp.${DomainName}."
          Type: 'CNAME'
          TTL: '3600'
          ResourceRecords:
            - "fm2.wanderleyteixeira.com.dkim.fmhosted.com"
  dnscname3:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: !If [NeedsNewHostedZone, !Ref DNS, !Ref "AWS::NoValue"]
      HostedZoneName: !If [NeedsNewHostedZone, !Ref "AWS::NoValue", !Sub "${PreExistingHostedZoneDomain}."]
      RecordSets:
        # Fastmail MX
        - Name: !Sub "fm3._domainkey._tcp.${DomainName}."
          Type: 'CNAME'
          TTL: '3600'
          ResourceRecords:
            - "fm3.wanderleyteixeira.com.dkim.fmhosted.com"

  # Certificate for HTTPS accesss through CloudFront
  Cert:
    Condition: ShouldCreateSslCertificate
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Ref DomainName
      SubjectAlternativeNames:
        - !Sub "www.${DomainName}"
        - !Sub "*.${DomainName}"
      ValidationMethod: DNS
      Tags:
        - Key: Domain
          Value: !Ref DomainName

Outputs:

  BucketName:
    Description: Name of S3 bucket to hold website content
    Value: !Ref S3BucketForWebsiteContent

  LogsBucket:
    Description: S3 Bucket with access logs
    Value: !If [NeedsNewLogsBucket, !Ref LogsBucket, !Ref PreExistingLogsBucket]

  DistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution

  WebsiteURL:
    Description: The URL of the website
    Value: !If 
      - ShouldCreateSslCertificate
      - !Sub 'https://${DomainName}'
      - !Sub 'http://${DomainName}'
